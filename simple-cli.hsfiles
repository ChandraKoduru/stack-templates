{-# START_FILE .gitignore #-}
/.sources
/.stack-work
/target

{-# START_FILE Makefile #-}
TARGET=target
EXE=$(TARGET)/{{name}}
DIST_EXE=$(EXE)-$(shell uname -s)-$(shell uname -m)
DIST_EXE_SIG=$(DIST_EXE).sig

build:
	stack build {{name}}

build-prof:
	stack build --profile --ghc-options="-rtsopts -fprof-auto" {{name}}

install:
	stack install {{name}}

bindist:
	mkdir -p $(TARGET)
	stack --local-bin-path $(TARGET) install {{name}}
	upx --best $(EXE)
	mv $(EXE) $(DIST_EXE)
	gpg --output $(DIST_EXE_SIG) --detach-sign $(DIST_EXE)

clean:
	stack clean
	rm -rf target

tags:
	hasktags-generate .

sources:
	stack-unpack-dependencies


.PHONY: build build-prof clean tags sources


{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0.1.0.0
synopsis:            Initial project template from stack
description:         Please see README.md
homepage:            https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
license:             BSD3
license-file:        LICENSE
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2016{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
category:            {{category}}{{^category}}Web{{/category}}
build-type:          Simple
-- extra-source-files:
cabal-version:       >=1.10

executable {{name}}
  hs-source-dirs:      .

  main-is:             Main.hs

  other-modules:       Args

  build-depends:       base
                     , aeson
                     , bytestring
                     , conduit
                     , conduit-extra
                     , containers
                     , filepath
                     , gitrev
                     , optparse-applicative
                     , text
                     , transformers
                     , unordered-containers

  default-language:    Haskell2010

  ghc-options:         -Wall -threaded


{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE Args.hs #-}
{-# LANGUAGE BangPatterns     #-}
{-# LANGUAGE RecordWildCards  #-}
{-# LANGUAGE TemplateHaskell  #-}

module Args (
  Args(..)
, runWithArgs
) where


import           Control.Monad
import           Data.Monoid
import           Development.GitRev
import           Options.Applicative
import           System.Exit


data Custom = Custom1 | Custom2 deriving (Eq, Show, Ord)


data Args = Args { argsVerbose :: !Bool
                 , argsVersion :: !Bool
                 , argsCustom :: !Custom
                 } deriving (Show)


parseArgs :: Parser Args
parseArgs = Args
     <$> switch
         ( long "verbose"
        <> short 'v'
        <> help "Be verbose.")
     <*> switch
         ( long "version"
        <> short 'V'
        <> help "Print version and exit.")
     <*> option parseCustomArg
         ( long "custom-arg"
        <> short 'c'
        <> value Custom1
        <> showDefault
        <> help "Arg with a custom parser." )


parseCustomArg :: ReadM Custom
parseCustomArg = eitherReader $ \s ->
  case s
    of "c1" -> Right Custom1
       "c2" -> Right Custom2
       x    -> Left $ "Failed to parse custom argument " <> x <> ", expected 'c1' or 'c2'"


runWithArgs :: (Args -> IO ())
           -> IO ()
runWithArgs rwa = execParser opts >>= printVersion >>= rwa
  where
    opts = info (helper <*> parseArgs)
      ( fullDesc
     <> header "Add program header here."
     <> progDesc "Add program description here. Source: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}")

    printVersion args@Args{..} = do
      when argsVersion $ die $ "Version: " <> $(gitBranch) <> "@" <> $(gitHash)
      return args
{-# START_FILE Main.hs #-}
{-# LANGUAGE BangPatterns     #-}
{-# LANGUAGE RecordWildCards  #-}

module Main where

import           Args

main:: IO ()
main = runWithArgs $ \args@Args{..} -> do
  putStrLn $ show args

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2016{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
